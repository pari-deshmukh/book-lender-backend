openapi: 3.0.0
info:
  version: 1.0.0
  title: Public Library Back End API
  description: Backend repository for Public Library. A Book Lending Web App. 
  contact:
    name: Pranali Deshmukh
    email: deshmuk3@coventry.ac.uk
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:3000/api/v1'
    description: Development server
tags:
  - name: Users
    description: API endpoints for user management.
  - name: Books
    description: API endpoints for book management
paths:
  /users:
    summary: Represents an individual user
    description: >
      This resource represents an individual user in the system.
      Each user is identified by a numeric `id`.
    post:
      tags:
        - Users
      description:
        Create a new user account.
      requestBody:
        description: All new user data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./user.json#/definitions/user
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userUpdated
    get:
      tags:
        - Users
      description:
        Get a list of all users.
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userList
        '401':
          description: Only admin users can list all accounts
    login:
      tags:
        - Users
      description:
        Login into your account.
      responses:
        '200':
          description: User logged in successfully.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userlogin
        '404':
          description: Incorrect UserId or Password
    search:
      tags:
        - Users
      description:
        Seach user by id.
      responses:
        '200':
          description: View the search result.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userSearched
        '401':
          description: Non-admin users can only view their own record
        '404':
          description: Not found
          
  /users/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the user
    get:
      tags:
        - Users
      description:
        Get user by id.
      responses:
        '200':
          description: View of user record
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userView
        '401':
          description: Non-admin users can only view their own record
        '404':
          description: Not found
    put:
      tags:
        - Users
      description:
        Update user by id.
      requestBody:
        description: Update a visible property or the password.
        required: true
        content:
          application/json:
            schema:
              $ref: ./user.json#/definitions/userUpdate
      responses:
        '200':
          description: Confirmation and link to record.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userUpdated
        '404':
          description: Not found
    delete:
      tags:
        - Users
      description:
        Delete user by id.
      responses:
        '200':
          description: Confirmation of deletion.
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userDeleted
        '401':
          description: Only admin users can delete accounts
        '404':
          description: Not found
  /book:
    summary: Represents the books
    description: >
      This resource represents the books in the system.
      Each book is identified by a numeric `id`.
    post:
      tags:
        - Books
      description:
        Add the new book.
      requestBody:
        description: All new books Data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./book.json#/definitions/book
      responses:
        '201':
          description: 
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookUpdated
    get:
      tags:
        - Books
      description:
        Get a list of all the books.
      responses:
        '200':
          description: List of Books
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/booksList
    search:
      tags:
        - Books
      description:
        Seach Book by id.
      responses:
        '200':
          description: View the search result.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookSearched
        '404':
          description: Not found
  /book/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the book
    get:
      tags:
        - Books
      description:
        Get book by id.
      responses:
        '200':
          description: View of book record
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookView
        '404':
          description: Not found
    put:
      tags:
        - Books
      description:
        Update book by id.
      requestBody:
        description: Update a visible details of the book.
        required: true
        content:
          application/json:
            schema:
              $ref: ./book.json#/definitions/bookUpdate
      responses:
        '200':
          description: Confirmation and link to record.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookUpdated
        '401':
          description: Only admin users can update the book details
        '404':
          description: Not found
    delete:
      tags:
        - Books
      description:
        Delete book by id.
      responses:
        '200':
          description: Confirmation of deletion.
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookDeleted
        '401':
          description: Only admin users can delete books
        '404':
          description: Not found
